(define (abundants n)
  (let ((array (make-vector (add1 n) 0)))
    (do ((x 1 (add1 x))) ((> x n))
      (do ((y (+ x x) (+ y x))) ((> y n))
        (vector-set! array y (+ x (vector-ref array y)))))
    (do ((x 1 (add1 x))
         (acc (list) (if (> (vector-ref array x) x)
                         (cons x acc)
                         acc)))
      ((> x n) acc))))

(define (main n)
  (let ((array (make-vector (add1 n) #t)))
    (do ((lst (abundants n) (cdr lst))) ((null? lst))
      (do ((cpy lst (cdr cpy))) ((null? cpy))
        (let ((tmp (+ (car lst) (car cpy))))
          (unless (> tmp n)
            (vector-set! array tmp #f)))))
    (do ((x 1 (add1 x))
         (acc 0 (if (vector-ref array x)
                    (+ acc x)
                    acc)))
      ((> x n) acc))))

(display (main 28123))
(newline)
