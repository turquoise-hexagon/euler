(define (main n)
  (let ((array (make-vector (add1 n))))
    (do ((i 1 (add1 i))) ((> i n))
      (vector-set! array i (sub1 (* 2 i i))))
    (set! res 0)
    (do ((i 1 (add1 i))) ((> i n) res)
      (let ((tmp (vector-ref array i)))
        (unless (= tmp 1)
          (when (= tmp (sub1 (* 2 i i)))
            (set! res (add1 res)))
          (unless (> tmp (+ n n))
            (do ((lst (list i (- i)) (cdr lst))) ((null? lst))
              (do ((j (+ (car lst) tmp) (+ j tmp))) ((> j n))
                (let loop ()
                  (vector-set! array j (quotient (vector-ref array j) tmp))
                  (when (zero? (remainder (vector-ref array j) tmp))
                    (loop)))))))))))

(display (main 50000000))
(newline)
