(import
  (chicken fixnum)
  (euler))

(define (make-phi primes limit)
  (let ((acc (make-vector (fx+ limit 1))))
    (let loop ((i 0))
      (unless (fx> i limit)
        (vector-set! acc i i)
        (loop (fx+ i 1))))
    (for-each
      (lambda (p)
        (let loop ((m p))
          (unless (fx> m limit)
            (vector-set! acc m (fx- (vector-ref acc m) (fx/ (vector-ref acc m) p)))
            (loop (fx+ m p)))))
      primes)
    (define (phi n)
      (vector-ref acc n))
    phi))

(define (make-chain primes limit)
  (let ((acc (make-vector (fx+ limit 1) 0)) (phi (make-phi primes limit)))
    (vector-set! acc 1 1)
    (define (chain n)
      (let ((_ (vector-ref acc n)))
        (if (fx= _ 0)
          (let ((_ (fx+ (chain (phi n)) 1)))
            (vector-set! acc n _)
            _)
          _)))
    chain))

(define (solve limit chain-length)
  (let* ((primes (primes limit)) (chain (make-chain primes limit)))
    (foldl
      (lambda (acc i)
        (if (fx= (chain i) chain-length)
          (fx+ acc i)
          acc))
      0 primes)))

(let ((_ (solve #e4e7 25)))
  (print _) (assert (= _ 1677366278943)))
