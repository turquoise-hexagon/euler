(import
  (chicken fixnum)
  (euler))

(define (make-rad n)
  (let ((acc (make-vector (fx+ n 1) 1)))
    (for-each
      (lambda (p)
        (let loop ((m p))
          (unless (fx> m n)
            (vector-set! acc m (fx* (vector-ref acc m) p))
            (loop (fx+ m p)))))
      (primes n))
    (define (rad n)
      (vector-ref acc n))
    rad))

(define (solve n)
  (let ((rad (make-rad n)) (l (fx/ n 2)))
    (let loop ((a 1) (acc 0))
      (if (fx> a l)
        acc
        (let ((i (if (fxeven? a) 2 1)))
          (let subloop ((b (fx+ a 1)) (acc acc))
            (let ((c (fx+ a b)))
              (if (fx> c n)
                (loop (fx+ a 1) acc)
                (subloop (fx+ b i)
                  (let* ((ra (rad a))
                         (rb (rad b))
                         (rc (rad c))
                         (_ (fx* (fx* ra rb) rc)))
                    (if (fx< _ c)
                      (if (fx= (fxgcd ra rb) 1)
                        (fx+ acc c)
                        acc)
                      acc)))))))))))

(let ((_ (solve 120000)))
  (print _) (assert (= _ 18407904)))
