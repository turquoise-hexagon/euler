(import
  (chicken fixnum)
  (euler))

(define (make-prime? n)
  (let ((acc (make-vector (fx+ n 1) #f)))
    (for-each
      (lambda (_)
        (vector-set! acc _ #t))
      (primes n))
    (define (prime? n)
      (vector-ref acc n))
    prime?))

(define (solve n)
  (let ((prime? (make-prime? n)))
    (do ((i 1 (fx+ i 1))
         (r 0 (do ((j (fx+ i 1) (fx+ j 1))
                   (r r (if (fx= (fxgcd i j) 1)
                          (do ((k 1 (fx+ k 1))
                               (r r (let ((a (fx- (fx* k (fx* i i)) 1))
                                          (b (fx- (fx* k (fx* i j)) 1))
                                          (c (fx- (fx* k (fx* j j)) 1)))
                                      (if (and (prime? a)
                                               (prime? b)
                                               (prime? c))
                                        (fx+ r (fx+ a (fx+ b c)))
                                        r))))
                            ((fx> k (fx/ n (fx* j j))) r))
                          r)))
                ((fx> (fx* j j) n) r))))
      ((fx> (fx* i i) n) r))))

(let ((_ (solve #e1e8)))
  (print _) (assert (= _ 100315739184392)))
