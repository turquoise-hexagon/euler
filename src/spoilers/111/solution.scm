(import
  (euler))

(define (generate total partial digit)
  (let loop ((total total) (partial partial) (number 0))
    (if (> partial total)
      '()
      (if (= total 0)
        (if (prime? number)
          `(,number)
          '())
        (let subloop ((next 0))
          (if (= next 10)
            '()
            (if (= next number 0)
              (subloop (+ next 1))
              (if (= next digit)
                (if (= partial 0)
                  (subloop (+ next 1))
                  (append (loop (- total 1) (- partial 1) (+ (* number 10) next)) (subloop (+ next 1))))
                (append (loop (- total 1) partial (+ (* number 10) next)) (subloop (+ next 1)))))))))))

(define (solve total)
  (let loop ((digit 0) (acc 0))
    (if (= digit 10)
      acc
      (let subloop ((partial total))
        (let ((lst (generate total partial digit)))
          (if (null? lst)
            (subloop (- partial 1))
            (loop (+ digit 1) (apply + acc lst))))))))

(let ((_ (solve 10)))
  (print _) (assert (= _ 612407567715)))
