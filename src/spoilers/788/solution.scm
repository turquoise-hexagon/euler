(define (make-factorial n)
  (let ((acc (make-vector (+ n 1) 1)))
    (let loop ((i 1))
      (unless (> i n)
        (vector-set! acc i (* (vector-ref acc (- i 1)) i))
        (loop (+ i 1))))
    (define (factorial n)
      (vector-ref acc n))
    factorial))

(define (make-binomial n)
  (let ((factorial (make-factorial n)))
    (define (binomial n k)
      (/ (factorial n) (* (factorial k) (factorial (- n k)))))
    binomial))

(define (solve n)
  (let ((binomial (make-binomial (+ n 1))))
    (let loop ((k 1) (e 9) (acc 0))
      (if (> k (/ n 2))
        acc
        (loop (+ k 1) (* e 9) (+ acc (* e (- (binomial (+ n 1) k) (binomial (- (* 2 k) 1) k)))))))))

(let ((_ (modulo (solve 2022) 1000000007)))
  (print _) (assert (= _ 471745499)))
