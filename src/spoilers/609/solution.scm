(import
  (chicken fixnum)
  (euler))

(define (make-prime? primes limit)
  (let ((acc (make-vector (fx+ limit 1) #f)))
    (for-each
      (lambda (i)
        (vector-set! acc i #t))
      primes)
    (lambda (n)
      (vector-ref acc n))))

(define (make-prime-pi primes limit)
  (let ((acc (make-vector (fx+ limit 1))))
    (let loop ((i 0) (count 0) (lst primes))
      (if (null? lst)
        (do ((i i (fx+ i 1))) ((fx> i limit))
          (vector-set! acc i count))
        (let ((_ (car lst)))
          (do ((i i (fx+ i 1)))
            ((fx= i _) (loop i (fx+ count 1) (cdr lst)))
            (vector-set! acc i count)))))
    (lambda (n)
      (vector-ref acc n))))

(define-inline (function n)
  (let loop ((n (prime-pi n)) (count (if (prime? n) 0 1)))
    (unless (fx= n 0)
      (let ((count (if (not (prime? n))
                     (fx+ count 1)
                     count)))
        (vector-set! mem count (fx+ (vector-ref mem count) 1))
        (loop (prime-pi n) count)))))

(define (solve limit mod)
  (let* ((mem (make-vector (fx+ limit 1) 0)) (primes (primes limit)) (prime? (make-prime? primes limit)) (prime-pi (make-prime-pi primes limit)))
    (do ((i 1 (fx+ i 1))) ((fx> i limit))
      (function i))
    (do ((i 0 (fx+ i 1))
         (acc 1 (let ((_ (vector-ref mem i)))
                  (if (fx> _ 0)
                    (fxmod (fx* acc _) mod)
                    acc))))
      ((fx> i limit) acc))))

(let ((_ (solve #e1e8 1000000007)))
  (print _) (assert (= _ 172023848)))
