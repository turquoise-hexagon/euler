(import
  (chicken fixnum))

(define (make-sum-square-divisors n)
  (let ((acc (make-vector (fx+ n 1) 1)))
    (let loop ((i 2))
      (unless (fx> i n)
        (let subloop ((m i))
          (unless (fx> m n)
            (vector-set! acc m (fx+ (vector-ref acc m) (fx* i i)))
            (subloop (fx+ m i))))
        (loop (fx+ i 1))))
    (define (sum-square-divisors n)
      (vector-ref acc n))
    sum-square-divisors))

(define (fxabs n)
  (if (fx< n 0)
    (fxneg n)
    n))

(define (square? n)
  (let loop ((i n))
    (let ((_ (fx/ (fx+ i (fx/ n i)) 2)))
      (if (fx<= (fxabs (fx- i _)) 1)
        (fx= (fx* _ _) n)
        (loop _)))))

(define (solve n)
  (let ((sum-square-divisors (make-sum-square-divisors n)))
    (let loop ((i 1) (acc 0))
      (if (fx> i n)
        acc
        (loop (fx+ i 1)
          (if (square? (sum-square-divisors i))
            (fx+ acc i)
            acc))))))

(let ((_ (solve #e64e6)))
  (print _) (assert (= _ 1922364685)))
