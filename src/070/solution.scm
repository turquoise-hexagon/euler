(import
  (chicken fixnum)
  (euler))

(define (make-phi n)
  (let ((acc (make-vector (fx+ n 1) 0)))
    (let loop ((i 0))
      (unless (fx> i n)
        (vector-set! acc i i)
        (loop (fx+ i 1))))
    (for-each
      (lambda (p)
        (let loop ((m p))
          (unless (fx> m n)
            (vector-set! acc m (fx- (vector-ref acc m) (fx/ (vector-ref acc m) p)))
            (loop (fx+ m p)))))
      (primes n))
    (define (phi n)
      (vector-ref acc n))
    phi))

(define-syntax helper!
  (syntax-rules ()
    ((_ n vec inc)
     (let loop ((i n))
       (unless (fx= i 0)
         (let ((_ (fxmod i 10)))
           (vector-set! vec _ (fx+ (vector-ref vec _) inc)))
         (loop (fx/ i 10)))))))

(define (permutation? a b)
  (let ((acc (make-vector 10 0)))
    (helper! a acc +1)
    (helper! b acc -1)
    (let loop ((i 0))
      (if (fx= i 10)
        #t
        (if (fx= (vector-ref acc i) 0)
          (loop (fx+ i 1))
          #f)))))

(define (solve n)
  (let ((phi (make-phi n)))
    (let loop ((i 2) (tmp +inf.0) (acc 0))
      (if (fx> i n)
        acc
        (let ((p (phi i)))
          (if (permutation? i p)
            (let ((r (/ i p)))
              (if (> r tmp)
                (loop (fx+ i 1) tmp acc)
                (loop (fx+ i 1) r i)))
            (loop (fx+ i 1) tmp acc)))))))

(let ((_ (solve #e1e7)))
  (print _) (assert (= _ 8319823)))
