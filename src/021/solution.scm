(import
  (chicken fixnum))

(define (make-divisors-sum n)
  (let ((acc (make-vector (fx+ n 1) 0)))
    (do ((i 1 (fx+ i 1))) ((fx> i n))
      (do ((m (fx+ i i) (fx+ m i))) ((fx> m n))
        (vector-set! acc m (fx+ (vector-ref acc m) i))))
    (define (divisors-sum n)
      (vector-ref acc n))
    divisors-sum))

(define (solve n)
  (let ((divisors-sum (make-divisors-sum n)))
    (do ((i 0 (fx+ i 1))
         (acc 0 (let ((_ (divisors-sum i)))
                  (if (and (not (fx> _ n))
                           (not (fx= _ i))
                           (fx= i (divisors-sum _)))
                    (fx+ acc i)
                    acc))))
      ((fx> i n) acc))))

(let ((_ (solve #e1e4)))
  (print _) (assert (= _ 31626)))
