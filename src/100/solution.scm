(define-constant sqrt2    (sqrt 2))
(define-constant 2sqrt2   (* 2 sqrt2))
(define-constant 3-2sqrt2 (- 3 2sqrt2))
(define-constant 3+2sqrt2 (+ 3 2sqrt2))

(define (b n)
  (let ((3-2sqrt2^n (expt 3-2sqrt2 n))
        (3+2sqrt2^n (expt 3+2sqrt2 n)))
    (+ (- (/ (+ (- (* 2     3-2sqrt2^n)
                   (* sqrt2 3-2sqrt2^n)
                   (* 2     3+2sqrt2^n)
                   (* sqrt2 3+2sqrt2^n))
               4)
            8))
       1)))

(define (r n)
  (/ (+ (- (sqrt (+ (- (* 8 n n)
                       (* 8 n))
                    1))
          (* 2 n))
        1)
     2))

(define (solve n)
  (let loop ((i 1))
    (let* ((b (b i)) (r (r b)))
      (if (> (+ b r) n)
        (inexact->exact (round b))
        (loop (+ i 1))))))

(let ((_ (solve #e1e12)))
  (print _) (assert (= _ 756872327473)))
