(import
  (chicken fixnum)
  (euler))

(define (make-generate l n)
  (define (generate e)
    (let loop ((l l))
      (if (null? l)
        '()
        (let ((_ (expt (car l) e)))
          (if (> _ n)
            '()
            (cons _ (loop (cdr l))))))))
  generate)

(define (solve n)
  (let ((mem (make-vector (fx+ n 1) #f)))
    (let*
      ((generate (make-generate (primes (inexact->exact (ceiling (sqrt n)))) n))
       (a (generate 2))
       (b (generate 3))
       (c (generate 4)))
      (for-each
        (lambda (_)
          (do ((b b (cdr b)))
            ((or (null? b)
                 (fx> (fx+ _ (car b)) n)))
            (let ((_ (fx+ _ (car b))))
              (do ((c c (cdr c)))
                ((or (null? c)
                     (fx> (fx+ _ (car c)) n)))
                (let ((_ (fx+ _ (car c))))
                  (vector-set! mem _ #t))))))
        a)
      (do ((i 0 (fx+ i 1))
           (acc 0 (if (vector-ref mem i)
                    (fx+ acc 1)
                    acc)))
        ((fx> i n) acc)))))

(let ((_ (solve #e5e7)))
  (print _) (assert (= _ 1097343)))
