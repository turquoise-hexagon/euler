(import (srfi 69))

(define (main N)
  (let ((A (make-hash-table)))
    (do ((x 0 (add1 x))) ((> x N))
      (do ((y 1 (add1 y))) ((>= y x))
        (hash-table-set! A (/ y x) #t)))
    (let ((B (make-hash-table))
          (tmp (list -2 2 -1 1))
          (lst (hash-table-keys A)))
      (for-each
        (lambda (x)
          (for-each
            (lambda (y)
              (unless (> x y)
                (for-each
                  (lambda (n)
                    (let ((z (let helper ((x (+ (expt x n)
                                                (expt y n)))
                                          (y n))
                               (if (< y 0)
                                   (helper (/ 1 x) (- y))
                                   (let ((a (inexact->exact (floor (expt (+ (numerator x)   0.1) (/ 1 y)))))
                                         (b (inexact->exact (floor (expt (+ (denominator x) 0.1) (/ 1 y))))))
                                     (if (and (> a 0)
                                              (> b 0)
                                              (= (expt (/ a b) y) x))
                                         (/ a b)
                                         0))))))
                      (when (member z lst)
                        (hash-table-set! B (+ x y z) #t))))
                  tmp)))
            lst))
        lst)
      (let ((res (apply + (hash-table-keys B))))
        (+ (numerator   res)
           (denominator res))))))

(display (main 35))
(newline)
